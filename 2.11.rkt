#lang sicp
(define (make-interval a b) (cons a b))
(define (upper-bound x) (cdr x))
(define (lower-bound x) (car x))

(define (mult-interval x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (lower-bound y)))
        (p4 (* (upper-bound x) (upper-bound y))))
    (make-interval (min p1 p2 p3 p4) (max p1 p2 p3 p4))))




(define (bens-mult-interval x y)
  (let ((lx (lower-bound x))
        (ux (upper-bound x))
        (ly (lower-bound y))
        (uy (upper-bound y)))
    (cond ((and (< lx 0) (< ux 0))
           (cond ((and (< ly 0) (< uy 0)) (make-interval (* ux uy) (* lx ly)))
                 ((and (< ly 0) (>= uy 0)) (make-interval (* lx uy) (* lx ly)))
                 ((and (>= ly 0) (>= uy 0)) (make-interval (* lx uy) (* ux ly)))))
          ((and (< lx 0) (>= ux 0))
           (cond ((and (< ly 0) (< uy 0)) (make-interval (* ux ly) (* lx ly)))
                 ((and (< ly 0) (>= uy 0)) (make-interval (min (* lx uy) (* ux ly)) (* lx ly)))
                 ((and (>= ly 0) (>= uy 0)) (make-interval (* lx uy) (* ux uy)))))
          ((and (>= lx 0) (>= ux 0))
           (cond ((and (< ly 0) (< uy 0)) (make-interval (* ux ly) (* lx uy)))
                 ((and (< ly 0) (>= uy 0)) (make-interval (* ux ly) (* ux uy)))
                 ((and (>= ly 0) (>= uy 0)) (make-interval (* lx ly) (* ux uy))))))))




(define neg-neg (make-interval -2 -1))
(define neg-pos (make-interval -1 1))
(define pos-pos (make-interval 1 2))
(define neg-zero (make-interval -1 0))
(define zero-pos (make-interval 0 1))

(define (compare-mults x y)
  (let ((old (mult-interval x y))
        (new (bens-mult-interval x y)))
    (newline)
    (display "     (mult-interval (")
    (display (lower-bound x))
    (display " ")
    (display (upper-bound x))
    (display ") (")
    (display (lower-bound y))
    (display " ")
    (display (upper-bound y))
    (display ")) = ")
    (display old)
    (newline)
    (display "(bens-mult-interval (")
    (display (lower-bound x))
    (display " ")
    (display (upper-bound x))
    (display ") (")
    (display (lower-bound y))
    (display " ")
    (display (upper-bound y))
    (display ")) = ")
    (display new)
    (display " ... ")
    (display (and (= (lower-bound old) (lower-bound new)) (= (upper-bound old) (upper-bound new))))
    (newline)))


(define (run-tests x)
  (compare-mults x neg-neg)
  (compare-mults x neg-zero)
  (compare-mults x neg-pos)
  (compare-mults x zero-pos)
  (compare-mults x pos-pos)
  (newline))

(run-tests neg-neg)
(run-tests neg-zero)
(run-tests neg-pos)
(run-tests zero-pos)
(run-tests pos-pos)
