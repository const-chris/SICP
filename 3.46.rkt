#lang sicp

(define (make-mutex)
  (let ((cell (list false)))
    (define (the-mutex m)
      (cond ((eq? m 'acquire)
             (if (test-and-set! cell)
                 (the-mutex 'acquire))) ; retry
            ((eq? m 'release) (clear! cell))))
    the-mutex))

(define (clear! cell) (set-car! cell false))

(define (test-and-set! cell)
  (if (car cell)
      true
      (begin
        (set-car! cell true)
        false)))

#|
If test-and-set! is not atomic, situations like the following can arise
(proc1 and proc2 are the test-and-set! calls generated by two procedures'
attempts to acquire the same mutex):

-------------------------------------------------------------------
proc1                    cell                     proc2
                         '(false)
access mutex
                                                  access mutex
set!                     '(true)
return false
  (acquire mutex)        '(true)                  set!
                                                  return false
                                                    (acquire mutex)
-------------------------------------------------------------------
|#